[{"id":0,"title":"Introduction to Decentralized Identity","content":"#\n\nDecentralized identifiers (DIDs) are a new kind of digital identifier that lets\npeople and organizations have their own digital identity without relying on\ncentral systems. Think of a DID as a unique name for anyone or anything, like a\nperson, company, or object, however Unlike usual IDs that depend on big,\ncentralized systems, DIDs work independently.\n\nThis means the owner can prove they control their ID without needing approval\nfrom anyone else. Owner's use the cryptographic keys found in the DID document\nto prove they own the DID. This is a big deal because it means people can have\nmore control over their digital lives, and it makes it easier to trust people\nand organizations online.\n\n\nBenefits#\n\nDigital identities includes all kinds of identifiers like usernames, email\naddresses, and IDs that exist in the digital realm.\n\nIn the traditional model the control of an identity resides with the identity\nprovider such as a tech company, government, or bank Meaning the identity owner\ndoes not have full control over their identity and can not use their identity\nwithout the approval of the identity provider.\n\nIn the decentralized model, the digital identity is not stored or controlled by\nany single central organization. Instead, the owner of the identity has full\ncontrol over it, including which parts they share and with whom.\n\n\nEnhanced privacy and security#\n\nUsers have more control over their identity, they owner and can choose what\ninformation to share and with whom. This means that they can keep their personal\ninformation private and secure. Cryptographic proofs secure the identity, making\nit secure and tamper-proof.\n\n\nInteroperability#\n\nDIDs are designed to be interoperable across different platforms and systems.\nStandardization ensures that DIDs are usable across independent services,\norganization and entities without the need for separate identity verifications.\n\n\nReduced reliance on centralized entities#\n\nWith DIDs, the dependency on centralized entities for identity management is\ngreatly reduced. This decentralization mitigates the risks associated with data\nbreaches and misuse of personal data by central authorities.\n\n\nUser Empowerment#\n\nDIDs put users in the driver's seat of their digital identities. DID's work with\nVerifiable Credentials that let user's to control how, when, and with whom their\nidentity data is shared.\n\n\nUsage#\n\n\nDeveloper friendly#\n\nAn open source standards approach to DID design, makes it easy for developers to\nbuild applications and services. It opens up opportunities for integrating with\nexisting applications and building the next generation of the web.\n\n\nPortable#\n\nDIDs are portable, meaning they are not tied to any particular service provider\nor identity system. This lets users move their identity across different\nplatforms without losing their history or credibility, much like a phone number\nthat can be ported between carriers.\n\n\nSecure#\n\nDIDs user cryptography secure the owner, providing a high level of protection\nagainst identity theft, fraud, and unauthorized access. Compatible cryptographic\nalgorithms make it easier for any entity to verify each other's identities. This\nis particularly important in contexts like finance, healthcare, and e-government\nservices, where trust is paramount.\n\n\nStandardization#\n\nDID's are built on open standards, making DIDs work across platforms, systems,\nand applications. This means that an individual or organization can use their\nDID in various contexts without being locked into a single provider or\necosystem. It allows for seamless interaction between different services and\ntechnologies.\n\n\nFormat#\n\nEvery DID starts with the prefix did:, followed by a method, and then a unique\nidentifier. A simplified example of the DID's format is did::, an example DID\nlooks like did:example:123456789abcdefghi.\n\n\n\n\nPrefix#\n\ndid: is the fixed prefix for all decentralized identifiers, indicating that the\nURI is a DID and adheres to the DID specification.\n\n\nMethod#\n\nThe method component immediately follows the did: prefix and specifies the DID\nmethod to be used. Examples include btcr for Bitcoin, ethr for Ethereum, and web\nfor web-based DIDs. Each method publishes a specification detailing how the DID\nis created, resolved, updated, and deactivated.\n\n\nMethod specific ID#\n\nThis part of the DID is and is generated according to the rules of the DID\nmethod. It ensures the uniqueness of the DID within the context of its method.\nThe method-specific ID can represent various types of entities, such as\nindividuals, organizations, devices, or even abstract entities, and is used to\nretrieve the DID document associated with the DID.","routePath":"/test-islandjs/concepts/did/","lang":"","toc":[{"text":"Benefits","id":"benefits","depth":2,"charIndex":700},{"text":"Enhanced privacy and security","id":"enhanced-privacy-and-security","depth":3,"charIndex":1347},{"text":"Interoperability","id":"interoperability","depth":3,"charIndex":1647},{"text":"Reduced reliance on centralized entities","id":"reduced-reliance-on-centralized-entities","depth":3,"charIndex":1900},{"text":"User Empowerment","id":"user-empowerment","depth":3,"charIndex":2163},{"text":"Usage","id":"usage","depth":2,"charIndex":2371},{"text":"Developer friendly","id":"developer-friendly","depth":3,"charIndex":2380},{"text":"Portable","id":"portable","depth":3,"charIndex":2631},{"text":"Secure","id":"secure","depth":3,"charIndex":2914},{"text":"Standardization","id":"standardization","depth":2,"charIndex":3282},{"text":"Format","id":"format","depth":3,"charIndex":3621},{"text":"Prefix","id":"prefix","depth":3,"charIndex":3834},{"text":"Method","id":"method","depth":3,"charIndex":3976},{"text":"Method specific ID","id":"method-specific-id","depth":3,"charIndex":4275}],"domain":"","frontmatter":{"title":"Introduction to Decentralized Identity","page_type":"Article"},"version":""},{"id":1,"title":"Identity and Access Management - Overview - Vidos","content":"#\n\nThe IAM (Identity and Access Management) service is a crucial component of our\nsystem. It allows you to manage access to your resources in a secure manner.\n\n\nFeatures#\n\n * Fine grain access Control: Define who has what kind of access to which\n   resources.\n * API Key Management: Generate and manage API keys for accessing your resources\n   programmatically.","routePath":"/test-islandjs/services/iam/","lang":"","toc":[{"text":"Features","id":"features","depth":2,"charIndex":160}],"domain":"","frontmatter":{"title":"Identity and Access Management - Overview - Vidos"},"version":""},{"id":2,"title":"Universal Resolver - Overview - Vidos","content":"#\n\nThe Vidos Universal Resolver provides a scalable, reliable, and configurable DID\nresolution service. The W3C Decentralized Identifiers (DIDs) v1.0\nstandard-compliant service supports a comprehensive range of DID methods,\nensures 99.95% SLA-backed uptime, and cost-effective operations. It's designed\nfor seamless integration into enterprise systems and existing decentralized\nidentity applications.\n\n\n\n\nFeatures#\n\n * Support for Multiple DID Methods: The Universal Resolver supports a wide\n   range of DID methods.\n * API Access: Manage the resolver programmatically through our API.\n * Customizable: Customize the resolver to meet your specific needs.\n\n\nHow it works#\n\nVidos Universal Resolver responds to DID resolution requests with DID documents\nand metadata, as per the W3C DID Core and DID Resolution specifications. The\nresolver supports a broad range of DID methods, including jwk, plc, btcr, cheqd,\nebsi, ens, ethr, ion, key, oyd, polygonid, sov, and web.\n\n\nFAQs#\n\n\nGeneral#\n\nQ: What is Vidos Universal Resolver? The Vidos Universal Resolver is an\nenterprise-grade service for decentralized identifier (DID) resolution,\nsupporting a broad range of DID methods with configurable policies and high data\nsecurity standards.\n\nQ: Why should I use the Vidos Universal Resolver? Vidos Universal Resolver\nprovides developers with a simple, fully managed, high-performance DID\nresolution service that resolves DIDs across different DID methods, as per the\nW3C DID Core and DID Resolution specifications, producing conforming DID\ndocuments.\n\nQ: Currently we resolve more than one DID Method. Can I still use the Vidos\nUniversal Resolver? Yes. The Vidos Universal Resolver provides a unified API\ninterface to resolve various types of DID across supported methods. The resolver\nsimplifies the process by handling the complexities and offers secure, reliable\nresolution with rich monitoring capabilities.\n\nQ: Can I create multiple universal resolvers? Yes, with Vidos Universal\nResolver, you can create multiple resolves and configure them independently.\n\nQ: Does Vidos Universal Resolver offer a Service Level Agreement (SLA)? Yes.\nProfessional and Enterprise plans both provide a 99.95% uptime guarantee.\n\nQ: What are the benefits of the Vidos Universal Resolver in my application? The\nVidos Universal Resolver ensures applications can resolve DIDs quickly, and\nprovides a high degree of control and visibility over DID resolution, with\naccess to logs, user operations, and error monitoring.\n\n\nResolution#\n\nQ: What is decentralized identifier (DID) resolution? Decentralized identifier\n(DID) resolution is the process of obtaining a DID document and supporting\nmetadata for a given DID. Vidos Universal Resolver returns a resolution response\nbased on the DID's method specification.\n\nQ: Is the Vidos Universal Resolver a drop-in replacement for our existing\nuniversal resolver? The Vidos Universal Resolver can replace existing universal\nresolvers. Simply configure your resolver instance, then update your\napplications to use the new endpoint.\n\n\nStandards and compliance#\n\nQ: Does the Vidos Universal Resolver conform to the W3C standards? Yes, Vidos\nUniversal Resolver follows the standards layed out in the W3C DID Core and DID\nResolution specifications, producing conforming DID resolution responses.\n\nQ: How does the Vidos Universal Resolver integrate with existing credential\nissuer and management system? Following W3C standards, the Vidos Universal\nResolver is compatible with most credential issuers, verifiers, and distributed\nidentity services, ensuring seamless integration with existing systems.\n\n\nPricing#\n\nQ: How is the Vidos Universal Resolver licensed? The Vidos Universal Resolver is\nlicensed under a Software as a Service (SaaS) model.\n\nQ: What plans are available? There are three plans (see pricing for further\ninformation):\n\n * Developer Plan: For developers who need DID resolution in their application.\n   Get started easily and quickly.\n * Professional Plan: For businesses who need a scalable, reliable resolver in\n   production, with additional features. Quick and convenient to deploy, easy to\n   manage and keep up to date, resulting in access to a reliable resolver\n   customized for each application.\n * Enterprise Plan: Customizable solutions for large clients with additional\n   compliance and availability needs with dedicated support.","routePath":"/test-islandjs/services/resolver/","lang":"","toc":[{"text":"Features","id":"features","depth":2,"charIndex":405},{"text":"How it works","id":"how-it-works","depth":2,"charIndex":657},{"text":"FAQs","id":"faqs","depth":2,"charIndex":969},{"text":"General","id":"general","depth":3,"charIndex":977},{"text":"Resolution","id":"resolution","depth":3,"charIndex":2494},{"text":"Standards and compliance","id":"standards-and-compliance","depth":3,"charIndex":3047},{"text":"Pricing","id":"pricing","depth":3,"charIndex":3611}],"domain":"","frontmatter":{"title":"Universal Resolver - Overview - Vidos"},"version":""}]